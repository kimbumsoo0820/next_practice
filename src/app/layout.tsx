// "use client"
// use client를 적으면 클라이언트 컴포넌트로 활용 가능해짐
import type { Metadata } from "next";
import "./globals.css";
import Link from "next/link";
import { useEffect, useState } from "react";

// npx json-server --port 9999 --watch d.json
//위와 같은 명령어를 입력하게 되면 9999포트의 서버를 이용할 수 있게 되며, db.sjon파일이 생성됨
//db의 값이 변경될 때 마다 (--watch) 반영시킬 수 있다.

// Next js 는 서버 컴포넌트와 / 클라이언트 컴포넌트로 나뉘어져 있다
// 기본적으로 아무런 조치를 하지 않으면 서버 컴포넌트로 인식한다.
// 서버 컴포넌트에서는 useEffect, useState와 같은 훅을 이용할 수 없다.

export type TopicType = {
  id : number,
  title : string,
  body : string
}
export type TopicList = TopicType[];

export const metadata: Metadata = { // 이 녀석으로 위의 메타 데이터 설정 (서버 컴포넌트에서만 사용 가능)
  title: "Web tutorials",
  description: "Generated by kbs",
};

export default async function RootLayout({children,}: Readonly<{children: React.ReactNode;}>) {

  /* // useState와 useEffect는 client component일 떄에만 사용 가능
  const [topics,setTopics] = useState<TopicList>([])
  useEffect(()=> {
    fetch('http://localhost:9999/topics')
    .then((res)=> {
        return res.json();
    })
    .then((result: TopicList)=>{
      console.log('result', typeof(result));
      setTopics(result)
    })
  },[])
  */
    let topics : TopicList = []
    let error : string = ''
    const resp = await fetch('http://localhost:9999/topics', { cache: 'no-store' })
    if(resp) {
      topics = await resp.json()
    } else {
      error = '데이터를 불러올 수 없습니다.'
    }

  return (
    <html>
      <body>
        <h1> <Link href="/">WEB</Link> </h1>
        <ol>
          {error}
          {topics.map((topic:TopicType)=> {
            return <li key={topic.id}><Link href={`/read/${topic.id}`}>{topic.title}</Link></li>
          })}
        </ol>
        {children}
        <ul>
          <li><Link href="/create">Create</Link></li>
          <li><Link href="/update/1">Update</Link></li>
          <li><input type="button" value="delete" /></li>

        </ul>
        </body>
    </html>
  );
}
